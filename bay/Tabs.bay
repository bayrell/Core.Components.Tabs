/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.Tabs;

use Runtime.RuntimeUtils;
use Core.UI.Annotations.Event;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.MouseEvent.MouseWheelEvent;
use Core.UI.Render.CoreView;
use Core.Components.Tabs.TabsAssets;
use Core.Components.Tabs.TabsManager;
use Core.Components.Tabs.TabsModel;


struct Tabs extends CoreView
{	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%tabs{
				position: relative;
			}
			%tabs_header_wrap{
				overflow: hidden;
				white-space: nowrap;
				-webkit-overflow-scrolling: touch;
			}
			%tabs_header{
				position: relative;
			}
			%tab_header_item{
				display: inline-block;
				vertical-align: top;
				padding: 5px;
				cursor: pointer;
				-webkit-user-select: none;
				-moz-user-select: none;
				-khtml-user-select: none;
				-ms-user-select: none;
			}
			%tab_header_item.active{
				background-color: yellow;
			}
			%tabs_content_item{
				display: none;
			}
			%tabs_content_item.active{
				display: block;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda Template render(TabsModel model, UIStruct ui) =>
	
		<div @class='tabs' @key="div" data-active={ model.active != "" ? model.active : model.default_tab }>
			{ static::renderHeader(model, ui) }
			{ static::renderBottom(model, ui) }
		</div>
	;
	
	
	
	/**
	 * Header render
	 */
	lambda Template renderHeader(TabsModel model, UIStruct ui)
	{
		return 
			<div @class='tabs_header_wrap' @key="header"
				@annotations=[
					new Event
					{
						"event": classof MouseWheelEvent,
						"method_name": "onWheelTabs",
						"preventDefault": true,
						"animaton": true,
					},
				]
			>
				<div @class='tabs_header' @ref="header" style={ "left: "~model.left~"px" }>
				{ 
					ui.children != null ? 
						ui.children.map( 
							lambda UIStruct (UIStruct item) use (model) => 
								static::renderTab(item, model.active, model.default_tab) 
						) : ""
				}
				</div>
			</div>
		;
	}
	
	
	
	/**
	 * Header render
	 */
	lambda Template renderBottom(TabsModel model, UIStruct ui) =>
	
		<div @class='tabs_content_wrap' @key="content">
			{
				ui.children != null ? 
					ui.children.map( 
						lambda UIStruct (UIStruct item) use (model) => 
							static::renderContent(item, model.active, model.default_tab) 
					) : "" 
			}
		</div>
	;
	
	
	
	/**
	 * Header render
	 */
	lambda Template renderTab(UIStruct item, string active, string default_tab)
	{
		string key = "";
		string title = "";
		string class_name = "";
		mixed tag = null;
		if (item.props)
		{
			key = item.key;
			title = item.props.get("title", "");
			tag = item.props.get("@tag", null);
		}
		if (key == active) class_name = "active";
		else if (active == "" and default_tab != "" and key == default_tab) class_name = "active";
		return new UIStruct{
			"space": RuntimeUtils::getCssHash(classof Tabs),
			"class_name": static::getCurrentClassName(), 
			"kind": "element",
			"name": "div",
			"key": key,
			"annotations": 
			[
				new Event{ "event": classof MouseClickEvent, "method_name": "onTaskHeaderClick" },
				new Event{ "event": classof MouseContextMenuEvent, "method_name": "onTaskHeaderContext" },
			],
			"props": {
				"@class": "tab_header_item",
				"@tag": tag,
				"class": class_name,
				"data-tab-key": key,
			},
			"children": [
				RuntimeUtils::normalizeUI(title),
			],
		};
	}
	
	
	
	/**
	 * Tab render
	 */
	lambda Template renderContent(UIStruct item, string active, string default_tab)
	{
		string key = "";
		string class_name = "";
		if (item.props) key = item.key;
		if (key == active) class_name = "active";
		else if (active == "" and default_tab != "" and key == default_tab) class_name = "active";
		return new UIStruct{
			"space": RuntimeUtils::getCssHash(classof Tabs),
			"class_name": static::getCurrentClassName(), 
			"kind": "element",
			"name": "div",
			"key": key,
			"props": {
				"@class": "tabs_content_item",
				"class": class_name,
				"data-tab-key": key,
			},
			"children": item.children,
		};
	}
	
	
	
	
}